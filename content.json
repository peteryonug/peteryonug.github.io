{"pages":[],"posts":[{"title":"辨析 Sass 中的 Map 和 List","text":"辨析 Sass 中的 Map 和 List 如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。 自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。 那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 package.json 或者其他同类型的项目配置文件所控制，往往只需一条命令（gem update sass）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。 使用多重列表替代 Map 的优势之一就是减少代码量。下面让我们来比较一下多种列表和 Map 的语法结构以及遍历方式。 测试表格VariableDescriptionsiteSitewide information.pagePage specific information and custom variables set in front-matter.configSite configurationthemeTheme configuration. Inherits from site configuration._ (single underscore)Lodash librarypathPath of current pageurlFull URL of current pageenvEnvironment variables 语法比较测试标题在下面的示例中，我创建了一个用于控制响应式布局的数据，该数据一共有四个断点，每一个断点都包含了 min-width、max-width、font-size 和 line-height 四个样式。 Map 语法下面就是使用 Map 存储的数据，具体来说，该 Map 中首先存储了四个用于标识断点的 Key，相对应的是保存具体属性值得 Value。虽然这种形式可读性更高，但是总体代码量却高达 26 行 450 个字符。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253$breakpoint-map: (%uA0 %uA0 small: (%uA0 %uA0 %uA0 %uA0 min-width: null,%uA0 %uA0 %uA0 %uA0 max-width: 479px,%uA0 %uA0 %uA0 %uA0 base-font: 16px,%uA0 %uA0 %uA0 %uA0 vertical-rhythm: 1.3%uA0 %uA0 ),%uA0 %uA0 medium: (%uA0 %uA0 %uA0 %uA0 min-width: 480px,%uA0 %uA0 %uA0 %uA0 max-width: 959px,%uA0 %uA0 %uA0 %uA0 base-font: 18px,%uA0 %uA0 %uA0 %uA0 vertical-rhythm: 1.414%uA0 %uA0 ),%uA0 %uA0 large: (%uA0 %uA0 %uA0 %uA0 min-width: 960px,%uA0 %uA0 %uA0 %uA0 max-width: 1099px,%uA0 %uA0 %uA0 %uA0 base-font: 18px,%uA0 %uA0 %uA0 %uA0 vertical-rhythm: 1.5%uA0 %uA0 ),%uA0 %uA0 xlarge: (%uA0 %uA0 %uA0 %uA0 min-width: 1100px,%uA0 %uA0 %uA0 %uA0 max-width: null,%uA0 %uA0 %uA0 %uA0 base-font: 21px,%uA0 %uA0 %uA0 %uA0 vertical-rhythm: 1.618%uA0 %uA0 )); 多重列表语法下面的多重列表存储了和上面 Map 同样的数据，在多重列表中没有 Key-Value 的对应关系，这意味着要想找到特定的值，必须使用遍历或 nth() 的方式来实现了。从另一个角度来看，多种列表又比 Map 的代码量小得多，总共只有六行 180 个字符。 12345678910111213$breakpoint-list: (%uA0 %uA0 (small, null, 479px, 16px, 1.3),%uA0 %uA0 (medium, 480px, 959px, 18px, 1.414),%uA0 %uA0 (large, 960px, 1099px, 18px, 1.5),%uA0 %uA0 (xlarge, 1100px, null, 21px, 1.618)); 遍历比较测试标题从上面简单地比较中可以粗略的看出，多种列表的代码量明显少于 Map。但是，如果我们需要遍历这些值得话，复杂度又是怎样的呢？ 遍历 Map我们可以使用如下的代码遍历 Map： 123@each $label, $map in $breakpoint-map {} 这里的变量 $label 和 $map 会随着对 $breakpoint-map 的遍历被动态地赋值，$label 将会被赋值为 $breakpoint-map 的 Key，而 $map 会被赋值为 $breakpoint-map 的 Value。为了在遍历过程中获取特定值，我们就需要使用 Sass 原生的 map-get() 函数，使用该函数需要传入两个参数：Map 的名字和求取的 Key，最后返回该 Map 中匹配该 Key 的 Value。 具体的做法就是使用 @each 遍历 Map，然后使用 map-get() 获取特定值，最终只需要六行代码 220 个字符即可完成整个遍历： 12345678910111213@each $label, $map in $breakpoint-map {%uA0 %uA0 $min-width: map-get($map, min-width);%uA0 %uA0 $max-width: map-get($map, max-width);%uA0 %uA0 $base-font: map-get($map, base-font);%uA0 %uA0 $vertical-rhythm: map-get($map, vertical-rhythm);} 遍历多重列表遍历多重列表不必像遍历 Map 一样动态获取到 Map 后再使用 map-get() 函数取特定值，直接遍历一遍即可获得特定值。 因为多种列表内层的每一个列表结构相同，都有按照相同顺序排列的五个值，所以我们可以持续遍历每个值并赋值给特定的变量。无需调用 map-get()，直接引用这些变量即可进行赋值等裸机操作。最终遍历多重列表只使用了两行代码 100 个字符： 12345@each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list {} 慎用多重列表测试标题经过上述的比对，看起来多重列表各方面都在碾压 Map，实则不然，Sass 中添加 Map 有一条非常重要的原因就是：Key-Value 的映射关系。 遗漏键值如果要使用多重列表，那么就必须保证自己非常熟悉多重列表内部的每一项所代表的意义。下面我们举个例子，来看看遗漏了某些值的情况： 123456789101112131415161718192021222324252627282930313233343536373839$breakpoint-list: (%uA0 %uA0 (small, null, 479px, 16px, 1.3),%uA0 %uA0 (medium, 480px, 959px, 18px, 1.414),%uA0 %uA0 (large, 960px, 1099px, 18px, 1.5),%uA0 %uA0 (xlarge, 1100px, 21px, 1.618));p {%uA0 %uA0 @each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list {%uA0 %uA0 %uA0 %uA0 @if $min-width {%uA0 %uA0 %uA0 %uA0 %uA0 %uA0 @include breakpoint( $min-width ) {%uA0 %uA0 %uA0 %uA0 %uA0 %uA0 %uA0 %uA0 font-size: $base-font;%uA0 %uA0 %uA0 %uA0 %uA0 %uA0 %uA0 %uA0 line-height: $vertical-rhythm;%uA0 %uA0 %uA0 %uA0 %uA0 %uA0 }%uA0 %uA0 %uA0 %uA0 } @else {%uA0 %uA0 %uA0 %uA0 %uA0 %uA0 font-size: $base-font;%uA0 %uA0 %uA0 %uA0 %uA0 %uA0 line-height: $vertical-rhythm;%uA0 %uA0 %uA0 %uA0 }%uA0 %uA0 }} 当我们尝试运行这段代码时，结果肯定是错误地，因为在 $breakpoint-list 的最后一行，xlarge 被赋值给了 $label，1100px 被赋值给了 $min-width，21px 被赋值给了 $max-width, 1.618 被赋值给了 $base-font，最终导致 $vertical-rhythm 没有被赋值，结果就是 font-size 的属性值是错的，line-height 的属性值是空的。此外，Sass 还不会对此抛出错误，导致我们无从知晓错误所在。 如果我们使用 Map 来代替这里的多重列表，那么使用 map-get() 函数即使遇见空值也能正确获得想要的结果。这就是值得我们慎重思考的地方：多种列表虽然简单快速，但是丧失了 Map 中的容错能力和快速取值能力。 查找特定列表在多重列表中查找特定列表简直就是一种折磨。如果使用 Map，那么配合 map-get() 函数可以快速定位到特定子 Map： 123$medium-map: map-get($maps, medium); 但如果要获取多种列表 medium 列表，麻烦可就大了： 12345678910111213141516171819@function get-list($label) {%uA0 %uA0 @each $list in $breakpoint-list {%uA0 %uA0 %uA0 %uA0 @if nth($list, 1) == $label {%uA0 %uA0 %uA0 %uA0 %uA0 %uA0 @return $list;%uA0 %uA0 %uA0 %uA0 }%uA0 %uA0 }%uA0 %uA0 @return null;}$medium-list: get-list(medium); 这段代码的逻辑就是遍历整个多重列表，知道找到第一个匹配项，然后返回，如果一直没有找到匹配项，就一直遍历到末尾，然后返回 null。这实际上就是手工实现了 map-get() 的逻辑。 缺少原生的 Map 函数Sass 提供了诸多的原生函数用于处理 Map 数据类型，但是多重列表是没法调用这些函数的，比如，使用 map-merge() 可以合并两个 Map，如果两个 Map 有相同的值，则取第二个 Map 的值为最终值。当然你也可以在多重列表中使用 join() 或 append() 来增加新列表，从而模拟出 map-merge() 的效果。 另一个实用的 Map 函数就是 map-has-key()，对于依赖 map-get() 的自定义函数来说，map-has-key() 可以用来验证特定的 Key 是否存在。但在列表中是完全没有相似的方法。 总结Test Title相比起列表来说，Key-Value 模型的 Map 显然更有力量，原生的 Sass Map 函数更是提供了强力的数据查找和验证工具。 虽然多重列表代码量少，但并不能像 Map 一样进行错误检查或验证参数。在大多数时候，相比较多重列表而言，我相信 Map 是更好的选择。如果是为了更少的代码量和其他简单地调用，那么我偶尔会用用多重列表，但是从项目的宏观控制和数据存储方面显然更优秀。","link":"/2015/10/21/demo/"},{"title":"first blog","text":"first blog这是我的第一个在线博客","link":"/2017/08/09/first-blog/"},{"title":"Hello World","text":"Hello WorldWelcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Create a new post123$ hexo new \"My New Post\" More info: Writing Run server123$ hexo server More info: Server Generate static files123$ hexo generate More info: Generating Deploy to remote sites123$ hexo deploy More info: Deployment 123int main() { printf(\"hello world\\n\");}","link":"/2017/08/09/hello-world/"},{"title":"中兴杯项目的一些反思","text":"最近，参加了中兴杯的比赛，与同专业的几个同学合作。尽管项目开始时候对于项目中的模块作出了明确的划分，但是项目后期还是出现了很多可以早点避免的问题。这也让我对于项目管理中程序员之间的分工合作，以及规范约定，有了一些体会。 中兴杯项目的一些反思中兴杯项目的一些反思最近，参加了中兴杯的比赛，与同专业的几个同学合作。尽管项目开始时候对于项目中的模块作出了明确的划分，但是项目后期还是出现了很多可以早点避免的问题。这也让我对于项目管理中程序员之间的分工合作，以及规范约定，有了一些体会。 工作内容划分本来在划分了游戏的各个模块之后，应该就是每个人各领若干个锅，开始执行。但是由于对于Unity的不熟悉，小伙伴们似乎都不太主动领锅。导致的结果就是，我在分好模块之后，需要大家讨论分锅的时候，几乎没有人说话。这样的 分工不明确 就一直持续了一个多礼拜左右。等到一个礼拜过去后，我觉得大家对Unity熟悉一点了，又问分工，这次又是只有一部分人说话，我也没有发现，大家两次的认领出现了重复，也就是出现了两个人干的活有部分一样的情况。这样就一直持续到了ddl之前大约一个礼拜的时候，知道我们开始合并代码，我才发现他们竟然写了同一个部分。这样的 结果 就是我最后合并的时候得等他们再调整代码，耽误了时间，更影响人的耐心。原因 ：就是当初商量项目分工的时候大家都不说话，零零散散的有几个人说话，我也忘记记录了。大概开始时候大家都对Unity有些陌生，也对队友(我)比较陌生，所以很少交流。总结:就是以后无论如何，必须在项目开始时候把工作内容划分好，哪怕是分配不平，之后再调整都行，只要大家自己写代码的时候都把自己的模块划分清楚，文档注释写清楚。 模块划分不清晰项目之初，我按照自己对unity中网络同步的方式，对游戏进行了模块的划分，并且发到群里给大家看。但是大家似乎没有完全理解我的意思，按照自己的意思写了，同样是在准备合并的时候我才发现这一问题。 结果 就是最后不得不为了省时间，临时改代码，把模块之间的代码写到了一个部分，导致代码结构十分混乱，出现了大量重复功能的代码，完全和当初的模块设计不同。原因 :大家在开始时候不熟悉(对我)，缺少交流，对于我的本意理解偏差也没有被及时发现。总结:大家要多交流，任何一定点疑问都要提前交流沟通，确定 目录混乱这个问题在于，开始的时候，我们没有约定好文件夹的名称和内容，导致 结果 大家合并时候，出现了好几个名称类似，内容相近的文件夹，使得最后找一个文件要翻两三个文件夹才能找到，同样导致了目录结构很丑陋。对于文件名也没有明确的约定，导致大家看不懂互相的文件名称。以及出现了好几个放设计图的文件夹，文件差不多相同，但是每个都不能直接删除，因为都被引用了。原因:缺少对于项目中文件夹名称、用途的约定，对于文件名称的约定总结:在项目之初在文档之中，写明目录的结构，以及文件夹的命名和用途，以及在根目录下新开文件夹时需要的交流和确认。 命名空间(包)这个问题在这次项目中没有出现，也就是没有出现大家使用了相同类名的情况，但是这种情况仍是需要在项目开始考虑的。总结:在文档中写明对于命名空间的使用，(以何种方式命名? 以作者的名字？以模块的名字？并且最好在文档中记录) 版本控制开始时决定使用github进行版本控制，但是大家并没有像我以为的立即去学习，而是等到了代码写的差不多了，需要合并的时候，才开始学，这就导致我不得不等着小伙伴学习后上传代码才能合并，甚至出现了好几次把代码直接push到我的主分支的情况，这段时间是项目的最后一个礼拜，是最紧迫的时候，但是却因此浪费了不少时间和精力以及耐心。总结:对大家如果有任何要求，一定要保证大家做到了，不能自己想当然的以为是了。 文档与其说是文档，不如说是一些规范。之前开坑做项目的时候，说到写文档，总觉得没什么可写的，或者不知道写什么，所以也都没有写，也都在项目中出现了大大小小的问题。如今对于文档有了一些理解，所以以后一定要保证写好文档，确定好能确定的细节，有些部分不能立即明确，也应该在明确之后，立即补充，并且写明补充了什么，变化了什么，一目了然。这些也算是自己这次项目的最大的收获了吧。总结 :项目开始时候，写好文档，尽量明确好细节，规范。","link":"/2017/10/29/%E4%B8%AD%E5%85%B4%E6%9D%AF%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8F%8D%E6%80%9D/"},{"title":"延长游戏寿命的几种模式","text":"游戏寿命的本质还是取决于游戏的内容，质量和玩家体验，但是有一些额外的模式可以延长游戏寿命 游戏寿命的本质还是取决于游戏的内容，质量和玩家体验，但是有一些额外的模式可以延长游戏寿命 0. 成就系统（评价系统）在游戏中添加成就系统，在某种程度上类似于任务，使玩家为了达成成就获取奖励或者成就感，不断挑战更高难度。 关键词: 神庙逃亡 , 水果忍者 1. DLC &amp; MODDLC的全称是Downloadable Content，MOD的是Modification的缩写，两者都是指对于游戏本体一些增加的额外部分，内容可能有地图，关卡，战役，人物，道具等。区别在于DLC是由游戏厂商发行，MOD一般是由玩家制作。DlC有收费和免费之分，许多收费的DLC被认为是游戏公司为了圈钱而出，但是从事实上为游戏公司带来了大量收入 关键词： 上古卷轴5 , 帝国时代2 ， 地图编辑器 2. 多人游戏单机游戏在加入多人模式，后会使得游戏的玩法更加丰富，也有可能会吸引到已经对游戏感到无聊的玩家回归。玩家在完了游戏之后，还有可能让别人购买游戏以便一起玩游戏。 关键词: 使命召唤系列 ， 魔兽争霸系列 3. 二周目二周目是指在通关游戏一次之后，从头开始。二周目与一周目的不同，主要会在一些游戏道具，经验值，难度，隐藏难度，隐藏剧情等方面。一些游戏的二周目还会有继承，即一周目中获得的装备物品会在二周目中留下来。与之类似的还有三周目，四周目等等。应用这些会使得玩家明显增加玩游戏的时间，以及对游戏的兴趣。 关键词: 鬼泣 ， 魂斗罗 ， 黑魂 4. 多种剧情，多种角色游戏中有选择剧情的部分，使得玩家为了体验所有剧情，必须多次通关，或者至少在关键节点保存后重复打某一个关卡。多种角色，体验不同职业的新鲜感和技能。类似于多周目。 关键词: 文字冒险游戏 , 黑魂 ， 质量效应","link":"/2017/10/28/%E5%BB%B6%E9%95%BF%E6%B8%B8%E6%88%8F%E5%AF%BF%E5%91%BD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%A8%A1%E5%BC%8F/"},{"title":"部署本地已经生成的Hexo博客到服务器记录","text":"最近用github学生优惠租了DigitalOcean的一个vps服务器，开始学习使用服务器。想起来当初用github平台搭建的Hexo博客，决定将Hexo博客为自己的服务器部署一份。本博客记录整个部署已经成功生成的本地Hexo博客部署到Nginx服务器的过程。本人技术尚浅，有不正确之处欢迎指正。 部署本地已经生成的Hexo博客到服务器记录前言最近用github学生优惠租了DigitalOcean的一个vps服务器，开始学习使用服务器。想起来当初用github平台搭建的Hexo博客，决定将Hexo博客为自己的服务器部署一份。本博客记录整个部署已经成功生成的本地Hexo博客部署到Nginx服务器的过程。本人技术尚浅，有不正确之处欢迎指正。 1.安装Nginx我使用的是Ubuntu的服务器系统，所以直接 123sudo apt-get install nginx 一步安装完成。安装之后使用nginx启动，然后打开你的域名或ip地址，如果有nginx的welcome之类的页面出现即说明安装成功。 后才知道还有这一步。nginx的默认根目录位于/var/www/，但是这个目录普通用户操作是需要超级权限的，不安全，因此我们需要专门的博客目录，并且最好是在家目录里面，如本博客以~/blog为例。步骤如下：1.建立根目录~/blog，命令：12345cd ~mkdir ~/blog 2.修改nginx设置文件，命令：123456789cd /etc/nginx/sites-enabled/sudo rm defaultsudo cp ../sites-available/default ./hexosudo vim ./default 找到root /var/www/html,修改为root /home/~/blog/blog（此处~应换成你的博客根目录所在用户的名字，也即此目录是该用户的家目录）,修改完后保存即可关于为什么是blog/blog而不是blog的问题，后面会有说明。原因大概的说就是使用git的hook功能，在~/blog下面放一个worktree和一个gitdir（blog.git）。修改配置之后可以进行一下测验，比如在blog/blog下面写写一个简单的index.html文件，使用命令nginx -s reload让nginx重新加载配置文件，打开你的域名或ip地址，应该就可以看到你刚干创建的index.html文件。如果没有的话就是配置没有成功。 3.安装Hexo关于在自己的本地机器上安装Hexo，网上的教程很多，以我安装时的经验来看应该是没有什么大问题的 4.部署到服务器可能你已经有过将Hexo部署到github的经验，但是部署到服务器还是有些不一样的。大致步骤包括 创建git裸仓库 配置github hook 配置服务器ssh公钥（可选） 使用Hexo一键部署 具体步骤为： 1.创建git裸仓库 进入~/blog，cd ~/blog 创建裸仓库，git init --bare blog.git 2.配置hook 修改hooks，vim blog.git/hooks/post-receive 加入下面几行```bash #!/bin/sh git --work-tree=/home/~/blog/blog --git-dir=/home/~/blog/blog.git checkout -f12345678910111213141516，注意同样的`~`需要替换为相应用户名###### 3.配置ssh公钥ssh公钥主要是用于免密登录服务器，在这里可以用于免密部署。以我的理解，本机的私钥是独一无二，并且只有自己持有的，只有本机的私钥才能对应上本机的公钥，所以将本机的公钥放在服务器上，服务器会用公钥来检验登录者所用的私钥是否是本机的私钥，从而检验登录着是不是本机。具体步骤如下：1. 在本机生成密钥对，如已有可跳过，`ssh-keygen`，一路确定,然后会在`~/.ssh/`下面有两个文件`id—rsa`和`id_rsa.pub`，前者私钥，后者公钥，私钥一定要保管好。2. 登录服务器，在服务器blog根目录所在用户家目录创建`.ssh`文件，放入认证公钥，命令：```bash cd ~ mkdir .ssh vim authorized_keys 粘贴上你的本机生成的公钥，保存即可。 4.使用Hexo一键部署 修改本机Hexo配置文件，命令：```bash 先进入Hexo根目录，这个因机器而异 vim _config.yml1234567找到deploy项，将repo改为```plain git@***.***.***.***:/home/~/blog/blog.git 我这里用了ip地址，也可以修改为域名。~还是要修改为对应用户名。如果需要部署到多个网站，如既部署到自己的服务器，又部署到github，则可以改为: 1234567repo: 自己的网站名字: git@***.***.***.***:/home/~/blog/blog.git github: git@github.com:penguinang/penguinang.github.io.git hexo d，部署到此，部署到服务器上就完成了。 结语如果有什么问题，欢迎大家留言提问或指正","link":"/2017/10/04/%E6%88%90%E5%8A%9F%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"css,","slug":"css","link":"/tags/css/"},{"name":"游戏,","slug":"游戏","link":"/tags/%E6%B8%B8%E6%88%8F/"},{"name":"服务器学习,","slug":"服务器学习","link":"/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AD%A6%E4%B9%A0/"}],"categories":[]}