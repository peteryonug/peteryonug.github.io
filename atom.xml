<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>写字的地方</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://peteryonug.github.io/"/>
  <updated>2019-11-08T15:12:43.075Z</updated>
  <id>http://peteryonug.github.io/</id>
  
  <author>
    <name>Penguinang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>中兴杯项目的一些反思</title>
    <link href="http://peteryonug.github.io/2017/10/29/%E4%B8%AD%E5%85%B4%E6%9D%AF%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E5%8F%8D%E6%80%9D/"/>
    <id>http://peteryonug.github.io/2017/10/29/中兴杯项目的一些反思/</id>
    <published>2017-10-28T16:00:00.000Z</published>
    <updated>2019-11-08T15:12:43.075Z</updated>
    
    <content type="html"><![CDATA[<p>最近，参加了中兴杯的比赛，与同专业的几个同学合作。尽管项目开始时候对于项目中的模块作出了明确的划分，但是项目后期还是出现了很多可以早点避免的问题。这也让我对于项目管理中程序员之间的分工合作，以及规范约定，有了一些体会。</p><a id="more"></a><h1 id="中兴杯项目的一些反思"><a href="#中兴杯项目的一些反思" class="headerlink" title="中兴杯项目的一些反思"></a>中兴杯项目的一些反思</h1><h1 id="中兴杯项目的一些反思-1"><a href="#中兴杯项目的一些反思-1" class="headerlink" title="中兴杯项目的一些反思"></a>中兴杯项目的一些反思</h1><p>最近，参加了中兴杯的比赛，与同专业的几个同学合作。尽管项目开始时候对于项目中的模块作出了明确的划分，但是项目后期还是出现了很多可以早点避免的问题。这也让我对于项目管理中程序员之间的分工合作，以及规范约定，有了一些体会。</p><h3 id="工作内容划分"><a href="#工作内容划分" class="headerlink" title="工作内容划分"></a>工作内容划分</h3><p>本来在划分了游戏的各个模块之后，应该就是每个人各领若干个锅，开始执行。但是由于对于Unity的不熟悉，小伙伴们似乎都不太主动领锅。导致的结果就是，我在分好模块之后，需要大家讨论分锅的时候，几乎没有人说话。这样的 <strong>分工不明确</strong> 就一直持续了一个多礼拜左右。等到一个礼拜过去后，我觉得大家对Unity熟悉一点了，又问分工，这次又是只有一部分人说话，我也没有发现，大家两次的认领出现了重复，也就是出现了两个人干的活有部分一样的情况。这样就一直持续到了ddl之前大约一个礼拜的时候，知道我们开始合并代码，我才发现他们竟然写了同一个部分。这样的 <strong>结果</strong> 就是我最后合并的时候得等他们再调整代码，耽误了时间，更影响人的耐心。<br><strong>原因</strong> ：<br>就是当初商量项目分工的时候大家都不说话，零零散散的有几个人说话，我也忘记记录了。大概开始时候大家都对Unity有些陌生，也对队友(我)比较陌生，所以很少交流。<br><strong>总结</strong>:<br>就是以后无论如何，必须在项目开始时候把工作内容划分好，哪怕是分配不平，之后再调整都行，只要大家自己写代码的时候都把自己的模块划分清楚，文档注释写清楚。</p><h3 id="模块划分不清晰"><a href="#模块划分不清晰" class="headerlink" title="模块划分不清晰"></a>模块划分不清晰</h3><p>项目之初，我按照自己对unity中网络同步的方式，对游戏进行了模块的划分，并且发到群里给大家看。但是大家似乎没有完全理解我的意思，按照自己的意思写了，同样是在准备合并的时候我才发现这一问题。 <strong>结果</strong> 就是最后不得不为了省时间，临时改代码，把模块之间的代码写到了一个部分，导致代码结构十分混乱，出现了大量重复功能的代码，完全和当初的模块设计不同。<br><strong>原因</strong> :<br>大家在开始时候不熟悉(对我)，缺少交流，对于我的本意理解偏差也没有被及时发现。<br><strong>总结</strong>:<br>大家要多交流，任何一定点疑问都要提前交流沟通，确定</p><h3 id="目录混乱"><a href="#目录混乱" class="headerlink" title="目录混乱"></a>目录混乱</h3><p>这个问题在于，开始的时候，我们没有约定好文件夹的名称和内容，导致 <strong>结果</strong> 大家合并时候，出现了好几个名称类似，内容相近的文件夹，使得最后找一个文件要翻两三个文件夹才能找到，同样导致了目录结构很丑陋。对于文件名也没有明确的约定，导致大家看不懂互相的文件名称。以及出现了好几个放设计图的文件夹，文件差不多相同，但是每个都不能直接删除，因为都被引用了。<br><strong>原因</strong>:<br>缺少对于项目中文件夹名称、用途的约定，对于文件名称的约定<br><strong>总结</strong>:<br>在项目之初在文档之中，写明目录的结构，以及文件夹的命名和用途，以及在根目录下新开文件夹时需要的交流和确认。</p><h3 id="命名空间-包"><a href="#命名空间-包" class="headerlink" title="命名空间(包)"></a>命名空间(包)</h3><p>这个问题在这次项目中没有出现，也就是没有出现大家使用了相同类名的情况，但是这种情况仍是需要在项目开始考虑的。<br><strong>总结</strong>:<br>在文档中写明对于命名空间的使用，(以何种方式命名? 以作者的名字？以模块的名字？并且最好在文档中记录)</p><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><p>开始时决定使用github进行版本控制，但是大家并没有像我以为的立即去学习，而是等到了代码写的差不多了，需要合并的时候，才开始学，这就导致我不得不等着小伙伴学习后上传代码才能合并，甚至出现了好几次把代码直接push到我的主分支的情况，这段时间是项目的最后一个礼拜，是最紧迫的时候，但是却因此浪费了不少时间和精力以及耐心。<br><strong>总结</strong>:<br>对大家如果有任何要求，一定要保证大家做到了，不能自己想当然的以为是了。</p><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>与其说是文档，不如说是一些规范。之前开坑做项目的时候，说到写文档，总觉得没什么可写的，或者不知道写什么，所以也都没有写，也都在项目中出现了大大小小的问题。如今对于文档有了一些理解，所以以后一定要保证写好文档，确定好能确定的细节，有些部分不能立即明确，也应该在明确之后，立即补充，并且写明补充了什么，变化了什么，一目了然。这些也算是自己这次项目的最大的收获了吧。<br><strong>总结</strong> :<br>项目开始时候，写好文档，尽量明确好细节，规范。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近，参加了中兴杯的比赛，与同专业的几个同学合作。尽管项目开始时候对于项目中的模块作出了明确的划分，但是项目后期还是出现了很多可以早点避免的问题。这也让我对于项目管理中程序员之间的分工合作，以及规范约定，有了一些体会。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>延长游戏寿命的几种模式</title>
    <link href="http://peteryonug.github.io/2017/10/28/%E5%BB%B6%E9%95%BF%E6%B8%B8%E6%88%8F%E5%AF%BF%E5%91%BD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%A8%A1%E5%BC%8F/"/>
    <id>http://peteryonug.github.io/2017/10/28/延长游戏寿命的几种模式/</id>
    <published>2017-10-27T16:00:00.000Z</published>
    <updated>2019-11-08T15:22:38.058Z</updated>
    
    <content type="html"><![CDATA[<p>游戏寿命的本质还是取决于游戏的内容，质量和玩家体验，但是有一些额外的模式可以延长游戏寿命</p><a id="more"></a>    <blockquote><p>游戏寿命的本质还是取决于游戏的内容，质量和玩家体验，但是有一些额外的模式可以延长游戏寿命</p></blockquote><h4 id="0-成就系统（评价系统）"><a href="#0-成就系统（评价系统）" class="headerlink" title="0. 成就系统（评价系统）"></a>0. 成就系统（评价系统）</h4><p>在游戏中添加成就系统，在某种程度上类似于任务，使玩家为了达成成就获取奖励或者成就感，不断挑战更高难度。</p><blockquote><p>关键词: <em>神庙逃亡</em> , <em>水果忍者</em></p></blockquote><h4 id="1-DLC-amp-MOD"><a href="#1-DLC-amp-MOD" class="headerlink" title="1.  DLC &amp; MOD"></a>1.  DLC &amp; MOD</h4><p>DLC的全称是Downloadable Content，MOD的是Modification的缩写，两者都是指对于游戏本体一些增加的额外部分，内容可能有地图，关卡，战役，人物，道具等。区别在于DLC是由游戏厂商发行，MOD一般是由玩家制作。<br>DlC有收费和免费之分，许多收费的DLC被认为是游戏公司为了圈钱而出，但是从事实上为游戏公司带来了大量收入</p><blockquote><p>关键词： <em>上古卷轴5</em> , <em>帝国时代2</em> ， <em>地图编辑器</em></p></blockquote><h4 id="2-多人游戏"><a href="#2-多人游戏" class="headerlink" title="2. 多人游戏"></a>2. 多人游戏</h4><p>单机游戏在加入多人模式，后会使得游戏的玩法更加丰富，也有可能会吸引到已经对游戏感到无聊的玩家回归。玩家在完了游戏之后，还有可能让别人购买游戏以便一起玩游戏。</p><blockquote><p>关键词: <em>使命召唤系列</em> ， <em>魔兽争霸系列</em></p></blockquote><h4 id="3-二周目"><a href="#3-二周目" class="headerlink" title="3. 二周目"></a>3. 二周目</h4><p>二周目是指在通关游戏一次之后，从头开始。二周目与一周目的不同，主要会在一些游戏道具，经验值，难度，隐藏难度，隐藏剧情等方面。一些游戏的二周目还会有继承，即一周目中获得的装备物品会在二周目中留下来。与之类似的还有三周目，四周目等等。应用这些会使得玩家明显增加玩游戏的时间，以及对游戏的兴趣。</p><blockquote><p>关键词: <em>鬼泣</em> ， <em>魂斗罗</em> ， <em>黑魂</em></p></blockquote><h4 id="4-多种剧情，多种角色"><a href="#4-多种剧情，多种角色" class="headerlink" title="4. 多种剧情，多种角色"></a>4. 多种剧情，多种角色</h4><p>游戏中有选择剧情的部分，使得玩家为了体验所有剧情，必须多次通关，或者至少在关键节点保存后重复打某一个关卡。多种角色，体验不同职业的新鲜感和技能。类似于多周目。</p><blockquote><p>关键词: <em>文字冒险游戏</em> , <em>黑魂</em> ， <em>质量效应</em></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;游戏寿命的本质还是取决于游戏的内容，质量和玩家体验，但是有一些额外的模式可以延长游戏寿命&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="游戏," scheme="http://peteryonug.github.io/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>部署本地已经生成的Hexo博客到服务器记录</title>
    <link href="http://peteryonug.github.io/2017/10/04/%E6%88%90%E5%8A%9F%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://peteryonug.github.io/2017/10/04/成功部署到服务器记录/</id>
    <published>2017-10-03T16:00:00.000Z</published>
    <updated>2019-11-08T15:12:17.445Z</updated>
    
    <content type="html"><![CDATA[<p>最近用github学生优惠租了DigitalOcean的一个vps服务器，开始学习使用服务器。想起来当初用github平台搭建的Hexo博客，决定将Hexo博客为自己的服务器部署一份。本博客记录整个部署已经成功生成的本地Hexo博客部署到Nginx服务器的过程。本人技术尚浅，有不正确之处欢迎指正。</p><a id="more"></a><h1 id="部署本地已经生成的Hexo博客到服务器记录"><a href="#部署本地已经生成的Hexo博客到服务器记录" class="headerlink" title="部署本地已经生成的Hexo博客到服务器记录"></a>部署本地已经生成的Hexo博客到服务器记录</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近用github学生优惠租了DigitalOcean的一个vps服务器，开始学习使用服务器。想起来当初用github平台搭建的Hexo博客，决定将Hexo博客为自己的服务器部署一份。本博客记录整个部署已经成功生成的本地Hexo博客部署到Nginx服务器的过程。本人技术尚浅，有不正确之处欢迎指正。</p><h3 id="1-安装Nginx"><a href="#1-安装Nginx" class="headerlink" title="1.安装Nginx"></a>1.安装Nginx</h3><p>我使用的是Ubuntu的服务器系统，所以直接</p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure><p>一步安装完成。安装之后使用<code>nginx</code>启动，然后打开你的域名或ip地址，如果有nginx的welcome之类的页面出现即说明安装成功。</p><h3 id="后才知道还有这一步。nginx的默认根目录位于-var-www-，但是这个目录普通用户操作是需要超级权限的，不安全，因此我们需要专门的博客目录，并且最好是在家目录里面，如本博客以-blog为例。步骤如下："><a href="#后才知道还有这一步。nginx的默认根目录位于-var-www-，但是这个目录普通用户操作是需要超级权限的，不安全，因此我们需要专门的博客目录，并且最好是在家目录里面，如本博客以-blog为例。步骤如下：" class="headerlink" title="后才知道还有这一步。nginx的默认根目录位于/var/www/，但是这个目录普通用户操作是需要超级权限的，不安全，因此我们需要专门的博客目录，并且最好是在家目录里面，如本博客以~/blog为例。步骤如下："></a>后才知道还有这一步。nginx的默认根目录位于<code>/var/www/</code>，但是这个目录普通用户操作是需要超级权限的，不安全，因此我们需要专门的博客目录，并且最好是在家目录里面，如本博客以<code>~/blog</code>为例。步骤如下：</h3><h5 id="1-建立根目录-blog，命令："><a href="#1-建立根目录-blog，命令：" class="headerlink" title="1.建立根目录~/blog，命令："></a>1.建立根目录<code>~/blog</code>，命令：</h5><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">cd</span> ~</span><br><span class="line"></span><br><span class="line">mkdir ~/blog</span><br></pre></td></tr></table></figure><h5 id="2-修改nginx设置文件，命令："><a href="#2-修改nginx设置文件，命令：" class="headerlink" title="2.修改nginx设置文件，命令："></a>2.修改nginx设置文件，命令：</h5><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">cd</span> /etc/nginx/sites-enabled/</span><br><span class="line"></span><br><span class="line">sudo rm default</span><br><span class="line"></span><br><span class="line">sudo cp ../sites-available/default ./hexo</span><br><span class="line"></span><br><span class="line">sudo vim ./default</span><br></pre></td></tr></table></figure><p>找到<code>root   /var/www/html</code>,修改为<code>root     /home/~/blog/blog</code>（此处<code>~</code>应换成你的博客根目录所在用户的名字，也即此目录是该用户的家目录）,修改完后保存即可<br>关于为什么是blog/blog而不是blog的问题，后面会有说明。原因大概的说就是使用git的hook功能，在~/blog下面放一个worktree和一个gitdir（blog.git）。<br>修改配置之后可以进行一下测验，比如在<code>blog/blog</code>下面写写一个简单的<code>index.html</code>文件，使用命令<code>nginx -s reload</code>让nginx重新加载配置文件，打开你的域名或ip地址，应该就可以看到你刚干创建的<code>index.html</code>文件。如果没有的话就是配置没有成功。</p><h3 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h3><p>关于在自己的本地机器上安装Hexo，网上的教程很多，以我安装时的经验来看应该是没有什么大问题的</p><h3 id="4-部署到服务器"><a href="#4-部署到服务器" class="headerlink" title="4.部署到服务器"></a>4.部署到服务器</h3><p>可能你已经有过将Hexo部署到github的经验，但是部署到服务器还是有些不一样的。大致步骤包括</p><ul><li>创建git裸仓库</li><li>配置github hook</li><li>配置服务器ssh公钥（可选）</li><li>使用Hexo一键部署</li></ul><p>具体步骤为：</p><h6 id="1-创建git裸仓库"><a href="#1-创建git裸仓库" class="headerlink" title="1.创建git裸仓库"></a>1.创建git裸仓库</h6><ol><li><p>进入~/blog，<code>cd ~/blog</code></p></li><li><p>创建裸仓库，<code>git init --bare blog.git</code></p><h6 id="2-配置hook"><a href="#2-配置hook" class="headerlink" title="2.配置hook"></a>2.配置hook</h6></li><li><p>修改hooks，<code>vim blog.git/hooks/post-receive</code></p></li><li><p>加入下面几行```bash</p></li></ol><pre><code>#!/bin/shgit --work-tree=/home/~/blog/blog --git-dir=/home/~/blog/blog.git checkout -f</code></pre><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">，注意同样的`~`需要替换为相应用户名</span><br><span class="line"></span><br><span class="line">###### 3.配置ssh公钥</span><br><span class="line"></span><br><span class="line">ssh公钥主要是用于免密登录服务器，在这里可以用于免密部署。以我的理解，本机的私钥是独一无二，并且只有自己持有的，只有本机的私钥才能对应上本机的公钥，所以将本机的公钥放在服务器上，服务器会用公钥来检验登录者所用的私钥是否是本机的私钥，从而检验登录着是不是本机。具体步骤如下：</span><br><span class="line"></span><br><span class="line">1. 在本机生成密钥对，如已有可跳过，`ssh-keygen`，一路确定,然后会在`~/.ssh/`下面有两个文件`id—rsa`和`id_rsa.pub`，前者私钥，后者公钥，私钥一定要保管好。</span><br><span class="line">2. 登录服务器，在服务器blog根目录所在用户家目录创建`.ssh`文件，放入认证公钥，命令：```bash</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    cd ~</span><br><span class="line">    </span><br><span class="line">    mkdir .ssh</span><br><span class="line">    </span><br><span class="line">    vim authorized_keys</span><br></pre></td></tr></table></figure><p>粘贴上你的本机生成的公钥，保存即可。</p><h6 id="4-使用Hexo一键部署"><a href="#4-使用Hexo一键部署" class="headerlink" title="4.使用Hexo一键部署"></a>4.使用Hexo一键部署</h6><ol><li>修改本机Hexo配置文件，命令：```bash</li></ol><pre><code>先进入Hexo根目录，这个因机器而异vim _config.yml</code></pre><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">找到deploy项，将repo改为</span><br><span class="line"></span><br><span class="line">```plain</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    git@***.***.***.***:/home/~/blog/blog.git</span><br></pre></td></tr></table></figure><p>我这里用了ip地址，也可以修改为域名。<code>~</code>还是要修改为对应用户名。如果需要部署到多个网站，如既部署到自己的服务器，又部署到github，则可以改为:</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">repo:</span><br><span class="line"></span><br><span class="line">    自己的网站名字: git@***.***.***.***:/home/~/blog/blog.git</span><br><span class="line"></span><br><span class="line">    github: git@github.com:penguinang/penguinang.github.io.git</span><br></pre></td></tr></table></figure><ol><li><code>hexo d</code>，部署<br>到此，部署到服务器上就完成了。</li></ol><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>如果有什么问题，欢迎大家留言提问或指正</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近用github学生优惠租了DigitalOcean的一个vps服务器，开始学习使用服务器。想起来当初用github平台搭建的Hexo博客，决定将Hexo博客为自己的服务器部署一份。本博客记录整个部署已经成功生成的本地Hexo博客部署到Nginx服务器的过程。本人技术尚浅，有不正确之处欢迎指正。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="服务器学习," scheme="http://peteryonug.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>first blog</title>
    <link href="http://peteryonug.github.io/2017/08/09/first-blog/"/>
    <id>http://peteryonug.github.io/2017/08/09/first-blog/</id>
    <published>2017-08-08T16:00:00.000Z</published>
    <updated>2019-11-08T15:05:13.538Z</updated>
    
    <content type="html"><![CDATA[<h1 id="first-blog"><a href="#first-blog" class="headerlink" title="first blog"></a>first blog</h1><p>这是我的第一个在线博客</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;first-blog&quot;&gt;&lt;a href=&quot;#first-blog&quot; class=&quot;headerlink&quot; title=&quot;first blog&quot;&gt;&lt;/a&gt;first blog&lt;/h1&gt;&lt;p&gt;这是我的第一个在线博客&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://peteryonug.github.io/2017/08/09/hello-world/"/>
    <id>http://peteryonug.github.io/2017/08/09/hello-world/</id>
    <published>2017-08-08T16:00:00.000Z</published>
    <updated>2019-11-08T15:13:04.192Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h2><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">$ hexo new <span class="hljs-string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"hello world\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World&quot;&gt;&lt;/a&gt;Hello World&lt;/h1&gt;&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>辨析 Sass 中的 Map 和 List</title>
    <link href="http://peteryonug.github.io/2015/10/21/demo/"/>
    <id>http://peteryonug.github.io/2015/10/21/demo/</id>
    <published>2015-10-20T16:00:00.000Z</published>
    <updated>2019-11-08T15:12:52.482Z</updated>
    
    <content type="html"><![CDATA[<h1 id="辨析-Sass-中的-Map-和-List"><a href="#辨析-Sass-中的-Map-和-List" class="headerlink" title="辨析 Sass 中的 Map 和 List"></a>辨析 Sass 中的 Map 和 List</h1><a id="more"></a><p>如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。</p><p>自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。</p><p>那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 <code>package.json</code> 或者其他同类型的项目配置文件所控制，往往只需一条命令（<code>gem update sass</code>）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。</p><p>使用多重列表替代 Map 的优势之一就是减少代码量。下面让我们来比较一下多种列表和 Map 的语法结构以及遍历方式。</p><h2 id="测试表格"><a href="#测试表格" class="headerlink" title="测试表格"></a>测试表格</h2><p>VariableDescription<code>site</code>Sitewide information.<code>page</code>Page specific information and custom variables set in front-matter.<code>config</code>Site configuration<code>theme</code>Theme configuration. Inherits from site configuration.<code>_</code> (single underscore)<a href="http://lodash.com/" target="_blank" rel="noopener">Lodash</a> library<code>path</code>Path of current page<code>url</code>Full URL of current page<code>env</code>Environment variables</p><h2 id="语法比较"><a href="#语法比较" class="headerlink" title="语法比较"></a>语法比较</h2><h5 id="测试标题"><a href="#测试标题" class="headerlink" title="测试标题"></a>测试标题</h5><p>在下面的示例中，我创建了一个用于控制响应式布局的数据，该数据一共有四个断点，每一个断点都包含了 <code>min-width</code>、<code>max-width</code>、<code>font-size</code> 和 <code>line-height</code> 四个样式。</p><h4 id="Map-语法"><a href="#Map-语法" class="headerlink" title="Map 语法"></a>Map 语法</h4><p>下面就是使用 Map 存储的数据，具体来说，该 Map 中首先存储了四个用于标识断点的 Key，相对应的是保存具体属性值得 Value。虽然这种形式可读性更高，但是总体代码量却高达 26 行 450 个字符。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">$breakpoint-map: (</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 small: (</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 %uA0 %uA0 min-width: null,</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 %uA0 %uA0 max-width: 479px,</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 %uA0 %uA0 base-font: 16px,</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 %uA0 %uA0 vertical-rhythm: 1.3</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 ),</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 medium: (</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 %uA0 %uA0 min-width: 480px,</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 %uA0 %uA0 max-width: 959px,</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 %uA0 %uA0 base-font: 18px,</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 %uA0 %uA0 vertical-rhythm: 1.414</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 ),</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 large: (</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 %uA0 %uA0 min-width: 960px,</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 %uA0 %uA0 max-width: 1099px,</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 %uA0 %uA0 base-font: 18px,</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 %uA0 %uA0 vertical-rhythm: 1.5</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 ),</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 xlarge: (</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 %uA0 %uA0 min-width: 1100px,</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 %uA0 %uA0 max-width: null,</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 %uA0 %uA0 base-font: 21px,</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 %uA0 %uA0 vertical-rhythm: 1.618</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 )</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="多重列表语法"><a href="#多重列表语法" class="headerlink" title="多重列表语法"></a>多重列表语法</h4><p>下面的多重列表存储了和上面 Map 同样的数据，在多重列表中没有 Key-Value 的对应关系，这意味着要想找到特定的值，必须使用遍历或 <code>nth()</code> 的方式来实现了。从另一个角度来看，多种列表又比 Map 的代码量小得多，总共只有六行 180 个字符。</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">$breakpoint-list: (</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 (small, null, 479px, 16px, 1.3),</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 (medium, 480px, 959px, 18px, 1.414),</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 (large, 960px, 1099px, 18px, 1.5),</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 (xlarge, 1100px, null, 21px, 1.618)</span><br><span class="line"></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="遍历比较"><a href="#遍历比较" class="headerlink" title="遍历比较"></a>遍历比较</h2><h5 id="测试标题-1"><a href="#测试标题-1" class="headerlink" title="测试标题"></a>测试标题</h5><p>从上面简单地比较中可以粗略的看出，多种列表的代码量明显少于 Map。但是，如果我们需要遍历这些值得话，复杂度又是怎样的呢？</p><h4 id="遍历-Map"><a href="#遍历-Map" class="headerlink" title="遍历 Map"></a>遍历 Map</h4><p>我们可以使用如下的代码遍历 Map：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">@each $label, $map in $breakpoint-map &#123;&#125;</span><br></pre></td></tr></table></figure><p>这里的变量 <code>$label</code> 和 <code>$map</code> 会随着对 <code>$breakpoint-map</code> 的遍历被动态地赋值，<code>$label</code> 将会被赋值为 <code>$breakpoint-map</code> 的 Key，而 <code>$map</code> 会被赋值为 <code>$breakpoint-map</code> 的 Value。为了在遍历过程中获取特定值，我们就需要使用 Sass 原生的 <code>map-get()</code> 函数，使用该函数需要传入两个参数：Map 的名字和求取的 Key，最后返回该 Map 中匹配该 Key 的 Value。</p><p>具体的做法就是使用 <code>@each</code> 遍历 Map，然后使用 <code>map-get()</code> 获取特定值，最终只需要六行代码 220 个字符即可完成整个遍历：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">@each $label, $map in $breakpoint-map &#123;</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 $min-width: map-get($map, min-width);</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 $max-width: map-get($map, max-width);</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 $base-font: map-get($map, base-font);</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 $vertical-rhythm: map-get($map, vertical-rhythm);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="遍历多重列表"><a href="#遍历多重列表" class="headerlink" title="遍历多重列表"></a>遍历多重列表</h4><p>遍历多重列表不必像遍历 Map 一样动态获取到 Map 后再使用 <code>map-get()</code> 函数取特定值，直接遍历一遍即可获得特定值。</p><p>因为多种列表内层的每一个列表结构相同，都有按照相同顺序排列的五个值，所以我们可以持续遍历每个值并赋值给特定的变量。无需调用 <code>map-get()</code>，直接引用这些变量即可进行赋值等裸机操作。最终遍历多重列表只使用了两行代码 100 个字符：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">@each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="慎用多重列表"><a href="#慎用多重列表" class="headerlink" title="慎用多重列表"></a>慎用多重列表</h2><h5 id="测试标题-2"><a href="#测试标题-2" class="headerlink" title="测试标题"></a>测试标题</h5><p>经过上述的比对，看起来多重列表各方面都在碾压 Map，实则不然，Sass 中添加 Map 有一条非常重要的原因就是：Key-Value 的映射关系。</p><h4 id="遗漏键值"><a href="#遗漏键值" class="headerlink" title="遗漏键值"></a>遗漏键值</h4><p>如果要使用多重列表，那么就必须保证自己非常熟悉多重列表内部的每一项所代表的意义。下面我们举个例子，来看看遗漏了某些值的情况：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">$breakpoint-list: (</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 (small, null, 479px, 16px, 1.3),</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 (medium, 480px, 959px, 18px, 1.414),</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 (large, 960px, 1099px, 18px, 1.5),</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 (xlarge, 1100px, 21px, 1.618)</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">p &#123;</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 @each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list &#123;</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 %uA0 %uA0 @if $min-width &#123;</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 %uA0 %uA0 %uA0 %uA0 @include breakpoint( $min-width ) &#123;</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 %uA0 %uA0 %uA0 %uA0 %uA0 %uA0 font-size: $base-font;</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 %uA0 %uA0 %uA0 %uA0 %uA0 %uA0 line-height: $vertical-rhythm;</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 %uA0 %uA0 %uA0 %uA0 &#125;</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 %uA0 %uA0 &#125; @else &#123;</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 %uA0 %uA0 %uA0 %uA0 font-size: $base-font;</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 %uA0 %uA0 %uA0 %uA0 line-height: $vertical-rhythm;</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 %uA0 %uA0 &#125;</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们尝试运行这段代码时，结果肯定是错误地，因为在 <code>$breakpoint-list</code> 的最后一行，<code>xlarge</code> 被赋值给了 <code>$label</code>，<code>1100px</code> 被赋值给了 <code>$min-width</code>，<code>21px</code> 被赋值给了 <code>$max-width</code>, <code>1.618</code> 被赋值给了 <code>$base-font</code>，最终导致 <code>$vertical-rhythm</code> 没有被赋值，结果就是 <code>font-size</code> 的属性值是错的，<code>line-height</code> 的属性值是空的。此外，Sass 还不会对此抛出错误，导致我们无从知晓错误所在。</p><p>如果我们使用 Map 来代替这里的多重列表，那么使用 <code>map-get()</code> 函数即使遇见空值也能正确获得想要的结果。这就是值得我们慎重思考的地方：多种列表虽然简单快速，但是丧失了 Map 中的容错能力和快速取值能力。</p><h4 id="查找特定列表"><a href="#查找特定列表" class="headerlink" title="查找特定列表"></a>查找特定列表</h4><p>在多重列表中查找特定列表简直就是一种折磨。如果使用 Map，那么配合 <code>map-get()</code> 函数可以快速定位到特定子 Map：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">$medium-map: map-get($maps, medium);</span><br></pre></td></tr></table></figure><p>但如果要获取多种列表 <code>medium</code> 列表，麻烦可就大了：</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">@function get-list($label) &#123;</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 @each $list in $breakpoint-list &#123;</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 %uA0 %uA0 @if nth($list, 1) == $label &#123;</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 %uA0 %uA0 %uA0 %uA0 @return $list;</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 %uA0 %uA0 &#125;</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 &#125;</span><br><span class="line"></span><br><span class="line">%uA0 %uA0 @return null;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$medium-list: get-list(medium);</span><br></pre></td></tr></table></figure><p>这段代码的逻辑就是遍历整个多重列表，知道找到第一个匹配项，然后返回，如果一直没有找到匹配项，就一直遍历到末尾，然后返回 <code>null</code>。这实际上就是手工实现了 <code>map-get()</code> 的逻辑。</p><h4 id="缺少原生的-Map-函数"><a href="#缺少原生的-Map-函数" class="headerlink" title="缺少原生的 Map 函数"></a>缺少原生的 Map 函数</h4><p>Sass 提供了诸多的原生函数用于处理 Map 数据类型，但是多重列表是没法调用这些函数的，比如，使用 <code>map-merge()</code> 可以合并两个 Map，如果两个 Map 有相同的值，则取第二个 Map 的值为最终值。当然你也可以在多重列表中使用 <code>join()</code> 或 <code>append()</code> 来增加新列表，从而模拟出 <code>map-merge()</code> 的效果。</p><p>另一个实用的 Map 函数就是 <code>map-has-key()</code>，对于依赖 <code>map-get()</code> 的自定义函数来说，<code>map-has-key()</code> 可以用来验证特定的 Key 是否存在。但在列表中是完全没有相似的方法。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h5 id="Test-Title"><a href="#Test-Title" class="headerlink" title="Test Title"></a>Test Title</h5><p>相比起列表来说，Key-Value 模型的 Map 显然更有力量，原生的 Sass Map 函数更是提供了强力的数据查找和验证工具。</p><p>虽然多重列表代码量少，但并不能像 Map 一样进行错误检查或验证参数。在大多数时候，相比较多重列表而言，我相信 Map 是更好的选择。如果是为了更少的代码量和其他简单地调用，那么我偶尔会用用多重列表，但是从项目的宏观控制和数据存储方面显然更优秀。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;辨析-Sass-中的-Map-和-List&quot;&gt;&lt;a href=&quot;#辨析-Sass-中的-Map-和-List&quot; class=&quot;headerlink&quot; title=&quot;辨析 Sass 中的 Map 和 List&quot;&gt;&lt;/a&gt;辨析 Sass 中的 Map 和 List&lt;/h1&gt;
    
    </summary>
    
    
    
      <category term="css," scheme="http://peteryonug.github.io/tags/css/"/>
    
  </entry>
  
</feed>
